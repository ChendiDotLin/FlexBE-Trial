// Auto-generated. Do not edit!

// (in-package test_actionlib.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class rendezvousFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.avg_real_dist = null;
      this.num_rb = null;
      this.stamp = null;
      this.centroid = null;
    }
    else {
      if (initObj.hasOwnProperty('avg_real_dist')) {
        this.avg_real_dist = initObj.avg_real_dist
      }
      else {
        this.avg_real_dist = 0;
      }
      if (initObj.hasOwnProperty('num_rb')) {
        this.num_rb = initObj.num_rb
      }
      else {
        this.num_rb = 0;
      }
      if (initObj.hasOwnProperty('stamp')) {
        this.stamp = initObj.stamp
      }
      else {
        this.stamp = {secs: 0, nsecs: 0};
      }
      if (initObj.hasOwnProperty('centroid')) {
        this.centroid = initObj.centroid
      }
      else {
        this.centroid = new geometry_msgs.msg.Point();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type rendezvousFeedback
    // Serialize message field [avg_real_dist]
    bufferOffset = _serializer.int32(obj.avg_real_dist, buffer, bufferOffset);
    // Serialize message field [num_rb]
    bufferOffset = _serializer.int32(obj.num_rb, buffer, bufferOffset);
    // Serialize message field [stamp]
    bufferOffset = _serializer.time(obj.stamp, buffer, bufferOffset);
    // Serialize message field [centroid]
    bufferOffset = geometry_msgs.msg.Point.serialize(obj.centroid, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type rendezvousFeedback
    let len;
    let data = new rendezvousFeedback(null);
    // Deserialize message field [avg_real_dist]
    data.avg_real_dist = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [num_rb]
    data.num_rb = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [stamp]
    data.stamp = _deserializer.time(buffer, bufferOffset);
    // Deserialize message field [centroid]
    data.centroid = geometry_msgs.msg.Point.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 40;
  }

  static datatype() {
    // Returns string type for a message object
    return 'test_actionlib/rendezvousFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'cc93f34c8348356787b6d9cf6a90994a';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback
    int32 avg_real_dist
    int32 num_rb
    time stamp
    geometry_msgs/Point centroid
    # This will show the user how well the behavior is working in real time
    
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new rendezvousFeedback(null);
    if (msg.avg_real_dist !== undefined) {
      resolved.avg_real_dist = msg.avg_real_dist;
    }
    else {
      resolved.avg_real_dist = 0
    }

    if (msg.num_rb !== undefined) {
      resolved.num_rb = msg.num_rb;
    }
    else {
      resolved.num_rb = 0
    }

    if (msg.stamp !== undefined) {
      resolved.stamp = msg.stamp;
    }
    else {
      resolved.stamp = {secs: 0, nsecs: 0}
    }

    if (msg.centroid !== undefined) {
      resolved.centroid = geometry_msgs.msg.Point.Resolve(msg.centroid)
    }
    else {
      resolved.centroid = new geometry_msgs.msg.Point()
    }

    return resolved;
    }
};

module.exports = rendezvousFeedback;
