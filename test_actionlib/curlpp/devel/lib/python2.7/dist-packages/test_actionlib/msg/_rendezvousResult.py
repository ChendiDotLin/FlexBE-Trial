# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from test_actionlib/rendezvousResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class rendezvousResult(genpy.Message):
  _md5sum = "aa2c5772ffd5ab3fec357158cc8913e3"
  _type = "test_actionlib/rendezvousResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
bool completed
int32 num_rb
int32 avg_real_dist
time stamp
geometry_msgs/Point centroid
# The bool will tell the client whether the behavior was completed or not while the avg real dist will give the user a metric to see how well the behavior was executed. 
#Also how many robots are in the swarm as this server will try to be independent of the number of robots spawned. 

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['completed','num_rb','avg_real_dist','stamp','centroid']
  _slot_types = ['bool','int32','int32','time','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       completed,num_rb,avg_real_dist,stamp,centroid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rendezvousResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.completed is None:
        self.completed = False
      if self.num_rb is None:
        self.num_rb = 0
      if self.avg_real_dist is None:
        self.avg_real_dist = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
    else:
      self.completed = False
      self.num_rb = 0
      self.avg_real_dist = 0
      self.stamp = genpy.Time()
      self.centroid = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2i2I3d().pack(_x.completed, _x.num_rb, _x.avg_real_dist, _x.stamp.secs, _x.stamp.nsecs, _x.centroid.x, _x.centroid.y, _x.centroid.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.completed, _x.num_rb, _x.avg_real_dist, _x.stamp.secs, _x.stamp.nsecs, _x.centroid.x, _x.centroid.y, _x.centroid.z,) = _get_struct_B2i2I3d().unpack(str[start:end])
      self.completed = bool(self.completed)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2i2I3d().pack(_x.completed, _x.num_rb, _x.avg_real_dist, _x.stamp.secs, _x.stamp.nsecs, _x.centroid.x, _x.centroid.y, _x.centroid.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.completed, _x.num_rb, _x.avg_real_dist, _x.stamp.secs, _x.stamp.nsecs, _x.centroid.x, _x.centroid.y, _x.centroid.z,) = _get_struct_B2i2I3d().unpack(str[start:end])
      self.completed = bool(self.completed)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2i2I3d = None
def _get_struct_B2i2I3d():
    global _struct_B2i2I3d
    if _struct_B2i2I3d is None:
        _struct_B2i2I3d = struct.Struct("<B2i2I3d")
    return _struct_B2i2I3d
